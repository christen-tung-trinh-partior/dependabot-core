# shellcheck shell=bash
export LOCAL_IMAGE="ghcr.io/dependabot/dependabot-updater-"

function docker_build() {
  [[ -n "$SKIP_BUILD" ]] && return
  ECOSYSTEM="$1"

  local TARGETARCH;
  case "$(uname -m)"
  in
    amd64 | x86_64) TARGETARCH=amd64 ;;
    arm64 | aarch64) TARGETARCH=arm64 ;;
    *) TARGETARCH=amd64 ;;
  esac

  # shellcheck disable=SC2086  # as $DOCKER_BUILD_ARGS relies on word-splitting
  docker build \
    $DOCKER_BUILD_ARGS \
    --build-arg TARGETARCH="$TARGETARCH" \
    --build-arg BUILDKIT_INLINE_CACHE=1 \
    --cache-from "ghcr.io/dependabot/dependabot-updater-core" \
    -t "ghcr.io/dependabot/dependabot-updater-core" \
    -f Dockerfile.updater-core \
    .

  # shellcheck disable=SC2086  # as $DOCKER_BUILD_ARGS relies on word-splitting
  docker build \
    $DOCKER_BUILD_ARGS \
    --build-arg TARGETARCH="$TARGETARCH" \
    --build-arg BUILDKIT_INLINE_CACHE=1 \
    --cache-from "ghcr.io/dependabot/dependabot-updater-$ECOSYSTEM" \
    -t "$LOCAL_IMAGE$ECOSYSTEM" \
    -f $ECOSYSTEM/Dockerfile \
    .

  # Verify max layers; an AUFS limit that was _crucial_ on Heroku (but not now)
  IMAGE_LAYERS=$(docker history -q "$LOCAL_IMAGE$ECOSYSTEM" | wc -l | sed -e 's/ //g')
  echo "$LOCAL_IMAGE$ECOSYSTEM contains $IMAGE_LAYERS layers"
  [[ $IMAGE_LAYERS -lt 126 ]]
}

function docker_exec() {
  docker_build "$1"
  docker run --env DEPENDABOT_TEST_ACCESS_TOKEN \
  --rm \
  -v "$(pwd)/.:/home/dependabot/dependabot-updater:delegated" \
  -ti "$LOCAL_IMAGE$ECOSYSTEM" "${@:2}"
}

function docker_bundle_exec() {
  docker_build "$1"

  docker run --env DEPENDABOT_TEST_ACCESS_TOKEN \
  --env VCR \
  --rm \
  -v "$(pwd)/updater/spec/fixtures/vcr_cassettes:/home/dependabot/dependabot-updater/spec/fixtures/vcr_cassettes" \
  "$LOCAL_IMAGE$ECOSYSTEM" bundle exec "${@:2}"
}

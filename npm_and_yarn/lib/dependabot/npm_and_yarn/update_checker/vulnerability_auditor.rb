# frozen_string_literal: true

require "dependabot/dependency"
require "dependabot/errors"
require "dependabot/logger"
require "dependabot/npm_and_yarn/file_parser"
require "dependabot/npm_and_yarn/helpers"
require "dependabot/npm_and_yarn/native_helpers"
require "dependabot/npm_and_yarn/update_checker"
require "dependabot/npm_and_yarn/update_checker/dependency_files_builder"
require "dependabot/shared_helpers"

module Dependabot
  module NpmAndYarn
    class UpdateChecker < Dependabot::UpdateCheckers::Base
      class VulnerabilityAuditor
        def initialize(dependency_files:, credentials:)
          @dependency_files = dependency_files
          @credentials = credentials
        end

        # Finds any dependencies in the `yarn.lock` or `package-lock.json` that
        # have a subdependency on the given dependency that does not satisfly
        # the target_version.
        #
        # @param dependency [Dependabot::Dependency] the dependency to check
        # @param security_advisories [Array<Dependabot::SecurityAdvisory>] advisories for the dependency
        # @return [Array<Hash{String => String}]
        #   * name [String] the blocking dependencies name
        #   * version [String] the version of the blocking dependency
        #   * requirement [String] the requirement on the target_dependency
        def audit(dependency:, security_advisories:)
          SharedHelpers.in_a_temporary_directory do
            dependency_files_builder = DependencyFilesBuilder.new(
              dependency: dependency,
              dependency_files: dependency_files,
              credentials: credentials
            )
            dependency_files_builder.write_temporary_dependency_files

            return if dependency_files_builder.package_locks.empty?

            lockfile = dependency_files_builder.package_locks.first
            npm_version = Helpers.npm_version(lockfile.content)

            # TODO:
            # - do we need to deal with shrinkwraps (dependency_files_builder.shrinkwraps)?
            # - npm6? yarn?
            return unless npm_version == "npm8"

            advisory_args = security_advisories.map do |a|
              {
                dependency_name: a.dependency_name,
                affected_versions: a.vulnerable_version_strings,
              }
            end

            # Format sketch:
            # {
            #   dependency_name: 'node-forge',
            #   fix_version: '1.3.1',
            #   fix_available: true,
            #   fix_updates: [
            #     {
            #       dependency_name: 'webpack-dev-server',
            #       current_version: '4.7.2',
            #       target_version: '4.8.6',
            #     },
            #   ]
            # }
            SharedHelpers.run_helper_subprocess(
              command: NativeHelpers.helper_path,
              function: "npm:vulnerabilityAuditor",
              args: [Dir.pwd, advisory_args]
            )
          end
        rescue SharedHelpers::HelperSubprocessFailed => e
          # TODO: log or bubble up failure?
          {
            fix_available: false,
            fix_updates: [],
          }
        end

        private

        attr_reader :dependency_files, :credentials
      end
    end
  end
end


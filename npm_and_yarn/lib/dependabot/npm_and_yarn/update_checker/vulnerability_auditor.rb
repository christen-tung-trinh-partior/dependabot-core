# frozen_string_literal: true

require "stringio"
require "dependabot/dependency"
require "dependabot/errors"
require "dependabot/logger"
require "dependabot/npm_and_yarn/file_parser"
require "dependabot/npm_and_yarn/helpers"
require "dependabot/npm_and_yarn/native_helpers"
require "dependabot/npm_and_yarn/update_checker"
require "dependabot/npm_and_yarn/update_checker/dependency_files_builder"
require "dependabot/shared_helpers"

module Dependabot
  module NpmAndYarn
    class UpdateChecker < Dependabot::UpdateCheckers::Base
      class VulnerabilityAuditor
        def initialize(dependency_files:, credentials:)
          @dependency_files = dependency_files
          @credentials = credentials
        end

        # Finds any dependencies in the `package-lock.json` or `npm-shrinkwrap.json` that have
        # a subdependency on the given dependency that is locked to a vuln version range.
        #
        # NOTE: yarn is currently not supported.
        #
        # @param dependency [Dependabot::Dependency] the dependency to check
        # @param security_advisories [Array<Dependabot::SecurityAdvisory>] advisories for the dependency
        # @return [Hash<String, [String, Array<Hash<String, String>>]>] the audit results
        #   * :dependency_name [String] the name of the dependency
        #   * :fix_available [Boolean] whether a fix is available
        #   * :current_version [String] the version of the dependency
        #   * :target_version [String] the version of the dependency after the fix
        #   * :fix_updates [Array<Hash<String, String>>] a list of dependencies to update in order to fix
        #     * :dependency_name [String] the name of the blocking dependency
        #     * :current_version [String] the current version of the blocking dependency
        #     * :target_version [String] the target version of the blocking dependency
        def audit(dependency:, security_advisories:)
          fix_unavailable = {
            "dependency_name" => dependency.name,
            "fix_available" => false
          }

          SharedHelpers.in_a_temporary_directory do
            dependency_files_builder = DependencyFilesBuilder.new(
              dependency: dependency,
              dependency_files: dependency_files,
              credentials: credentials
            )
            dependency_files_builder.write_temporary_dependency_files

            # `npm-shrinkwrap.js`, if present, takes precedence over `package-lock.js`.
            # Both files use the same format. See https://bit.ly/3lDIAJV for more.
            lockfile = (dependency_files_builder.shrinkwraps + dependency_files_builder.package_locks).first
            return fix_unavailable unless lockfile

            vuln_versions = security_advisories.map do |a|
              {
                dependency_name: a.dependency_name,
                affected_versions: a.vulnerable_version_strings
              }
            end

            SharedHelpers.run_helper_subprocess(
              command: NativeHelpers.helper_path,
              function: "npm:vulnerabilityAuditor",
              args: [Dir.pwd, vuln_versions]
            )
          end
        rescue SharedHelpers::HelperSubprocessFailed => e
          log_helper_subprocess_failure(dependency, e)
          fix_unavailable
        end

        private

        attr_reader :dependency_files, :credentials

        def log_helper_subprocess_failure(dependency, e)
          # See `Dependabot::SharedHelpers.run_helper_subprocess` for details on error context
          context = e.error_context || {}

          builder = ::StringIO.new
          builder << "VulnerabilityAuditor: "
          builder << "#{context[:function]} " if context[:function]
          builder << "failed"
          builder << " after #{context[:time_taken].truncate(2)}s" if context[:time_taken]
          builder << " while auditing #{dependency.name}: "
          builder << e.message
          builder << "\n" << context[:trace]

          msg = builder.string
          Dependabot.logger.info(msg) # TODO: is this the right log level?
        end
      end
    end
  end
end
